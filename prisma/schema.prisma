// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String @id @default(cuid())
  name                  String
  email                 String? @unique
  emailVerified         DateTime?
  image                 String?

  accounts              Account[]
  sessions              Session[]
  projects              ProjectUsers[]
  createdAt             DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                 String          @id @default(cuid())
  name               String
  slug               String          @unique
  logo               String?

  users              ProjectUsers[]
  invites            ProjectInvite[]
  tasks              Task[]
  
  sentEmails         SentEmail[]

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

enum Role {
  owner
  member
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role   @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
  other
}

model SentEmail {
  id        String    @id @default(cuid())
  type      EmailType
  createdAt DateTime  @default(now())
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

model jackson_index {
  id       Int    @id @default(autoincrement())
  key      String @db.VarChar(250)
  storeKey String @db.VarChar(250)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
}

model jackson_store {
  key        String    @id @db.VarChar(250)
  value      String    @db.Text
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  modifiedAt DateTime? @db.Timestamp(0)
}

model jackson_ttl {
  key       String @id @db.VarChar(250)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
}


model Task {
  id          String   @id @default(cuid())
  name        String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  comments    TaskComment[]

  @@index([projectId])
}

model TaskComment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String

  @@index([taskId])
}